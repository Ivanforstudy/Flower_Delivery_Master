import os
import sys
import django
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path, —á—Ç–æ–±—ã Django-–ø–∞–∫–µ—Ç –Ω–∞—à—ë–ª—Å—è
sys.path.append(os.path.dirname(os.path.abspath(__file__)) + "/..")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "flower_delivery_master.settings")
django.setup()

from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    filters, ContextTypes, ConversationHandler
)
from asgiref.sync import sync_to_async
from orders.models import TelegramOrder

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
BOUQUET, ADDRESS = range(2)

# –°—Ç–∞—Ä—Ç
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫–æ–π –±—É–∫–µ—Ç –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å?")
    return BOUQUET

# –ë—É–∫–µ—Ç
async def get_bouquet(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["bouquet_name"] = update.message.text
    await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏.")
    return ADDRESS

# –ê–¥—Ä–µ—Å
async def get_address(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    address = update.message.text
    bouquet_name = context.user_data.get("bouquet_name")
    user_id = update.effective_user.id

    success = await save_order(user_id, bouquet_name, address)

    if success:
        await update.message.reply_text("‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –°–ø–∞—Å–∏–±–æ!")
    else:
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.")
    return ConversationHandler.END

@sync_to_async
def save_order(user_id, bouquet_name, address):
    try:
        TelegramOrder.objects.create(
            telegram_user_id=user_id,
            bouquet_name=bouquet_name,
            address=address
        )
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
        return False

# –û—Ç–º–µ–Ω–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.")
    return ConversationHandler.END

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

    app = ApplicationBuilder().token("7763598812:AAHa-yOc3rZ0wINeAptiE6ktRflzADi_OqU").build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            BOUQUET: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_bouquet)],
            ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_address)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)
    app.run_polling()


