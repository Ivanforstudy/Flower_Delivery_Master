import os
import django
import logging
from datetime import datetime, time

from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ConversationHandler, ContextTypes

# Django –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'flower_delivery_master.settings')
django.setup()

from catalog.models import Product
from orders.models import TelegramOrder

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
BOUQUET, ADDRESS = range(2)

# üîî –î–∞–Ω–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
BOT_TOKEN = '7763598812:AAHa-yOc3rZ0wINeAptiE6ktRflzADi_OqU'
ADMIN_CHAT_ID = 2111297101


# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
def is_working_hours():
    now = datetime.now()
    current_time = now.time()
    current_day = now.weekday()  # –ü–Ω=0, ..., –í—Å=6

    if current_day >= 5:
        return 'weekend'

    if time(9, 0) <= current_time <= time(19, 0):
        return 'open'

    return 'closed'


# –°—Ç–∞—Ä—Ç
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    status = is_working_hours()

    if status == 'weekend':
        await update.message.reply_text(
            "üå∏ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Flower Delivery Master!\n"
            "–°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π.\n"
            "–ó–∞–∫–∞–∑—ã –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ –ø–æ –ø—è—Ç–Ω–∏—Ü—É —Å 09:00 –¥–æ 19:00."
        )
        return ConversationHandler.END

    if status == 'closed':
        await update.message.reply_text(
            "–ó–∞–∫–∞–∑—ã –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å 09:00 –¥–æ 19:00.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return ConversationHandler.END

    products = Product.objects.all()
    if products:
        product_list = "\n".join([f"‚Ä¢ {product.name} ‚Äî {product.price} —Ä—É–±." for product in products])
        await update.message.reply_text(
            f"üå∏ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Flower Delivery Master!\n\n"
            f"üìú –í–æ—Ç –Ω–∞—à –∫–∞—Ç–∞–ª–æ–≥:\n{product_list}\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—É–∫–µ—Ç–∞:"
        )
    else:
        await update.message.reply_text(
            "–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return ConversationHandler.END

    return BOUQUET


# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –±—É–∫–µ—Ç–∞
async def bouquet(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    bouquet_name = update.message.text.strip()

    if not Product.objects.filter(name__iexact=bouquet_name).exists():
        await update.message.reply_text(
            "‚ùå –¢–∞–∫–æ–≥–æ –±—É–∫–µ—Ç–∞ –Ω–µ—Ç –≤ –∫–∞—Ç–∞–ª–æ–≥–µ.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞."
        )
        return BOUQUET

    context.user_data['bouquet'] = bouquet_name
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
    return ADDRESS


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
async def address(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    address = update.message.text
    bouquet_name = context.user_data['bouquet']
    user_id = update.message.from_user.id
    username = update.message.from_user.username or "–ë–µ–∑ –∏–º–µ–Ω–∏"

    TelegramOrder.objects.create(
        user_id=user_id,
        username=username,
        bouquet_name=bouquet_name,
        delivery_address=address
    )

    await update.message.reply_text(
        f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑!\n\n"
        f"–ë—É–∫–µ—Ç: {bouquet_name}\n"
        f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {address}\n\n"
        f"–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏."
    )

    # üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    admin_message = (
        f"üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\n"
        f"üì¶ –ë—É–∫–µ—Ç: {bouquet_name}\n"
        f"üìç –ê–¥—Ä–µ—Å: {address}"
    )

    try:
        await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=admin_message)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")

    return ConversationHandler.END


# –û—Ç–º–µ–Ω–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.")
    return ConversationHandler.END


# üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–∫–∞–∑–∞–º –∑–∞ —Å–µ–≥–æ–¥–Ω—è
async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_CHAT_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    today = datetime.now().date()
    orders_today = TelegramOrder.objects.filter(created_at__date=today)
    total_orders = orders_today.count()

    total_revenue = 0
    for order in orders_today:
        product = Product.objects.filter(name__iexact=order.bouquet_name).first()
        if product:
            total_revenue += product.price

    message = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {today.strftime('%d.%m.%Y')}:\n\n"
        f"üõí –ó–∞–∫–∞–∑–æ–≤: {total_orders}\n"
        f"üí∞ –í—ã—Ä—É—á–∫–∞: {total_revenue} —Ä—É–±."
    )

    await update.message.reply_text(message)


# üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    orders = TelegramOrder.objects.filter(user_id=user_id).order_by('-created_at')

    if not orders.exists():
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
        return

    last_order = orders.first()

    status_dict = {
        'pending': '–í –æ–∂–∏–¥–∞–Ω–∏–∏',
        'in_progress': '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
        'completed': '–í—ã–ø–æ–ª–Ω–µ–Ω',
        'cancelled': '–û—Ç–º–µ–Ω—ë–Ω',
    }

    status = status_dict.get(last_order.status, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

    await update.message.reply_text(
        f"üì¶ –°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–∫–∞–∑–∞:\n\n"
        f"–ë—É–∫–µ—Ç: {last_order.bouquet_name}\n"
        f"–ê–¥—Ä–µ—Å: {last_order.delivery_address}\n"
        f"–°—Ç–∞—Ç—É—Å: {status}"
    )


def main():
    application = Application.builder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            BOUQUET: [MessageHandler(filters.TEXT & ~filters.COMMAND, bouquet)],
            ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, address)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    application.add_handler(conv_handler)
    application.add_handler(CommandHandler('stats', stats))
    application.add_handler(CommandHandler('status', status))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()


if __name__ == '__main__':
    main()
