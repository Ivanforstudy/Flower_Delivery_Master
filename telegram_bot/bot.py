

import logging
import os
import django
import traceback
import datetime

from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters
)
from asgiref.sync import sync_to_async

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'flower_delivery_master.settings')
django.setup()

from django.conf import settings
from orders.models import TelegramOrder

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_sessions = {}

# –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –º–∞–≥–∞–∑–∏–Ω–∞
WORK_HOURS_START = 9
WORK_HOURS_END = 19


def is_within_working_hours():
    now = datetime.datetime.now()
    weekday = now.weekday()
    return (weekday != 6) and (WORK_HOURS_START <= now.hour < WORK_HOURS_END)


# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    user_sessions[chat_id] = {"step": "bouquet"}
    await update.message.reply_text(
        "üå∏ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Flower Delivery Master!\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—É–∫–µ—Ç–∞:"
    )


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
@sync_to_async
def save_order(session, user):
    TelegramOrder.objects.create(
        bouquet_name=session["bouquet_name"],
        address=session["address"],
        telegram_user_id=user.id,
        telegram_username=user.username or user.full_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    )


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@sync_to_async
def get_user_orders(user_id):
    return list(
        TelegramOrder.objects.filter(telegram_user_id=user_id).order_by('-created_at')
    )


# –ö–æ–º–∞–Ω–¥–∞ /status ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    orders = await get_user_orders(user_id)

    if not orders:
        await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
        return

    message = "üì¶ –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n"
    for o in orders:
        message += (
            f"‚Ä¢ {o.bouquet_name} ‚Äî {o.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        )

    await update.message.reply_text(message)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    text = update.message.text

    if not is_within_working_hours():
        await update.message.reply_text(
            "‚õî –ó–∞–∫–∞–∑—ã –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å 09:00 –¥–æ 19:00.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return

    if chat_id not in user_sessions:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
        return

    session = user_sessions[chat_id]

    if session["step"] == "bouquet":
        session["bouquet_name"] = text
        session["step"] = "address"
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")

    elif session["step"] == "address":
        session["address"] = text

        try:
            await save_order(session, update.message.from_user)
            await update.message.reply_text("‚úÖ –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ!")
        except Exception as e:
            traceback.print_exc()
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞."
            )

        del user_sessions[chat_id]


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    TOKEN = settings.TELEGRAM_BOT_TOKEN

    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("status", status))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()


if __name__ == "__main__":
    main()
