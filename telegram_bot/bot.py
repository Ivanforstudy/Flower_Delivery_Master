import os
import django
import logging
from datetime import datetime, time, timedelta, timezone

from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    ContextTypes,
)

# Django setup
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "flower_delivery_master.settings")
django.setup()

from orders.models import TelegramOrder

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)

# Telegram Bot Token –∏ Admin ID
BOT_TOKEN = '7763598812:AAHa-yOc3rZ0wINeAptiE6ktRflzADi_OqU'
ADMIN_ID = 2111297101

# –≠—Ç–∞–ø—ã ConversationHandler
BOUQUET_NAME, DELIVERY_ADDRESS = range(2)


# –ü—Ä–æ–≤–µ—Ä–∫–∞, —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å –∏–ª–∏ –Ω–µ—Ç
def is_working_day_and_time():
    now = datetime.now(timezone.utc) + timedelta(hours=3)  # –ú–°–ö
    weekday = now.weekday()  # 0-–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 6-–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
    current_time = now.time()

    if weekday in [5, 6]:
        return False, "–°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π.\n–ó–∞–∫–∞–∑—ã –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Å –ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö–ê –ø–æ –ü–Ø–¢–ù–ò–¶–£ —Å 09:00 –¥–æ 19:00."

    if not (time(9, 0) <= current_time <= time(19, 0)):
        return False, "–ó–∞–∫–∞–∑—ã –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å 09:00 –¥–æ 19:00.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    return True, None


# –°—Ç–∞—Ä—Ç
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user

    is_open, message = is_working_day_and_time()
    if not is_open:
        await update.message.reply_text(
            f"üå∏ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Flower Delivery Master!\n\n{message}"
        )
        return ConversationHandler.END

    await update.message.reply_text(
        "üå∏ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Flower Delivery Master!\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—É–∫–µ—Ç–∞:"
    )

    context.user_data["telegram_username"] = user.username or "NoUsername"
    context.user_data["telegram_user_id"] = user.id

    return BOUQUET_NAME


# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –±—É–∫–µ—Ç–∞
async def bouquet_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["bouquet_name"] = update.message.text

    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")

    return DELIVERY_ADDRESS


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
async def delivery_address(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    delivery_address = update.message.text

    TelegramOrder.objects.create(
        bouquet_name=context.user_data["bouquet_name"],
        telegram_username=context.user_data["telegram_username"],
        telegram_user_id=context.user_data["telegram_user_id"],
        delivery_address=delivery_address,
    )

    await update.message.reply_text(
        f"‚úÖ –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!\n\n–ë—É–∫–µ—Ç: {context.user_data['bouquet_name']}\n"
        f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_address}"
    )

    return ConversationHandler.END


# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞
async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ.")
        return

    now = datetime.now(timezone.utc) + timedelta(hours=3)
    start_of_day = now.replace(hour=0, minute=0, second=0, microsecond=0)

    orders_today = TelegramOrder.objects.filter(created_at__gte=start_of_day)
    total_orders = orders_today.count()
    total_revenue = total_orders * 1500  # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, –∫–∞–∂–¥—ã–π –∑–∞–∫–∞–∑ = 1500 —Ä—É–±

    await update.message.reply_text(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è ({now.strftime('%d.%m.%Y')}):\n"
        f"üõçÔ∏è –ó–∞–∫–∞–∑–æ–≤: {total_orders}\n"
        f"üí∞ –í—ã—Ä—É—á–∫–∞: {total_revenue} —Ä—É–±."
    )


# –û—Ç–º–µ–Ω–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.")
    return ConversationHandler.END


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main() -> None:
    app = Application.builder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            BOUQUET_NAME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, bouquet_name)
            ],
            DELIVERY_ADDRESS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, delivery_address)
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("stats", stats))

    print("ü§ñ Bot started...")
    app.run_polling()


if __name__ == "__main__":
    main()
